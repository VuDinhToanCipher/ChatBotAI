@page "/login"
@using ChatBotAI.Application.DTOs.UserDTO
@using ChatBotAI.Application.Services.UserServices
@using Blazored.SessionStorage
@inject IUserService loginservice
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ISessionStorageService session

<div class="page-wrapper">
    <div class="form-container">
        <h3>Login</h3>
        <EditForm Model="login" OnValidSubmit="@HandleLogin" FormName="Login">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email:</label>
                <InputText @bind-Value="login.Email" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label>Password:</label>
                <InputText @bind-Value="login.Password" type="password" class="form-control"></InputText>
            </div>
            <button type="submit">Đăng nhập</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(alertmessage))
        {
            <div class="alert">@alertmessage</div>
        }

        <p>Chưa có tài khoản <a href="/registration">Đăng kí</a></p>
    </div>
</div>

@code {
    private LoginDto login = new();
    private string alertmessage;

    public async Task HandleLogin()
    {
        try
        {
            var response = await loginservice.LoginAsync(login);
            if (response.IsSuccess)
            {
                var userResponse = response.Message.Split("|");
                await session.SetItemAsync("Key", userResponse[0]);
                await session.SetItemAsync("Name", userResponse[1]);
                await session.SetItemAsync("Email", userResponse[2]);
                navigation.NavigateTo("/");
                navigation.Refresh(forceReload: true);
            }
            else
            {
                alertmessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            alertmessage = $"Lỗi khi đăng nhập: {ex.Message}";
            Console.WriteLine(ex.ToString());
            StateHasChanged();
        }
    }
}
