@page "/"
@using ChatApp1.Services
@using ChatBotAI.Application.DTOs.ConversationDTO
@using Markdig
@using Microsoft.Extensions.AI
@using System.Text
@using System.ComponentModel
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@implements IDisposable
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
<h3>Việt - Hung ChatBot</h3>
<div class="chat-container">
    <div class="chat-messages" @ref="messagesContainer">
        @if (Messages.Count == 0)
        {
        }
        else
        {
            @foreach (var message in Messages)
            {
                <div class="message @(message.IsUser ? "user-message" : "ai-message")">
                    @((MarkupString)Markdown.ToHtml(message.Content))
                </div>
            }
        }
    </div>
    <div class="chat-input-area">
        <input type="text"
               @bind="userInput"
               @bind:event="oninput"
               @onkeyup="HandleKeyUp"
               placeholder="Nhập câu hỏi của bạn ..."
               class="chat-input" />
        <button @onclick="SendMessage" class="send-button" disabled="@isStreaming">Gửi</button>
    </div>
</div>

@code {
    private const string SystemPrompt = @"
You are a friendly and intelligent assistant who communicates in English.

Response rules:

1. When the user greets you or asks casual small-talk questions:
   - Reply naturally and politely, like a human.
   - DO NOT use the search tool or any document data.

2. When the user asks for factual information that requires looking up documents or data:
   - Use the search tool to retrieve information.
   - Always include accurate citations in XML format:
     <citation filename='string' page_number='number'>exact quote here</citation>
   - Each citation must be a short phrase (≤5 words) taken verbatim from the source document.

3. If the search tool returns no results:
   - DO NOT make up any information.
   - Reply, for example: ""Sorry, I don't have accurate information on that question.""

4. Always check if the question really requires a search before using the search tool.

5. Use simple Markdown to format your responses; do not include images or HTML.
6.- Answer only what the user asks. Do not combine multiple questions into a single response.
";

    private string userInput = string.Empty;
    private ElementReference messagesContainer;
    private List<MessageDTO> Messages = new();
    private List<ChatMessage> messages = new();
    private bool isStreaming = false;
    private int statefulMessageCount;
    private readonly ChatOptions chatOptions = new();
    private CancellationTokenSource? currentResponseCancellation;

    protected override void OnInitialized()
    {
        statefulMessageCount = 0;
        messages.Add(new ChatMessage(ChatRole.System, SystemPrompt));
        chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync)];
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isStreaming) return;

        CancelAnyCurrentResponse();
        //Nội dung của người dùng
        Messages.Add(new MessageDTO { Content = userInput, IsUser = true });
        var userMessage = new ChatMessage(ChatRole.User, userInput);
        messages.Add(userMessage);
        //Nội dung AI
        var responseText = new StringBuilder();
        Messages.Add(new MessageDTO { Content = "", IsUser = false });
        currentResponseCancellation = new();

        try
        {
            isStreaming = true;

            // Phản hồi của AI
            await foreach (var update in ChatClient.GetStreamingResponseAsync(
                messages.Skip(statefulMessageCount), chatOptions, currentResponseCancellation.Token))
            {
                if (update.Text != null)
                {
                    responseText.Append(update.Text);
                    Messages[^1].Content = responseText.ToString();
                    await InvokeAsync(StateHasChanged);
                    await ScrollToBottom();
                }
            }
            var finalResponse = new ChatMessage(ChatRole.Assistant, responseText.ToString());
            messages.Add(finalResponse);
            statefulMessageCount = chatOptions.ConversationId is not null ? messages.Count : 0;
        }
        catch (Exception ex)
        {
            Messages[^1].Content = $"Error: {ex.Message}";
        }
        finally
        {
            isStreaming = false;
            userInput = string.Empty;
            currentResponseCancellation?.Dispose();
            currentResponseCancellation = null;
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        }
    }
    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
    }
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
    private void CancelAnyCurrentResponse()
    {
        currentResponseCancellation?.Cancel();
        currentResponseCancellation?.Dispose();
        currentResponseCancellation = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        Messages.Clear();
        messages.Clear();
        messages.Add(new ChatMessage(ChatRole.System, SystemPrompt));
        chatOptions.ConversationId = null;
        statefulMessageCount = 0;
        await InvokeAsync(StateHasChanged);
        await ScrollToBottom();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.DocumentId}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    public void Dispose()
    {
        currentResponseCancellation?.Cancel();
        currentResponseCancellation?.Dispose();
    }
}